// Generated by gencpp from file statistics_msgs/Stats1D.msg
// DO NOT EDIT!


#ifndef STATISTICS_MSGS_MESSAGE_STATS1D_H
#define STATISTICS_MSGS_MESSAGE_STATS1D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace statistics_msgs
{
template <class ContainerAllocator>
struct Stats1D_
{
  typedef Stats1D_<ContainerAllocator> Type;

  Stats1D_()
    : min(0.0)
    , max(0.0)
    , mean(0.0)
    , variance(0.0)
    , N(0)  {
    }
  Stats1D_(const ContainerAllocator& _alloc)
    : min(0.0)
    , max(0.0)
    , mean(0.0)
    , variance(0.0)
    , N(0)  {
  (void)_alloc;
    }



   typedef double _min_type;
  _min_type min;

   typedef double _max_type;
  _max_type max;

   typedef double _mean_type;
  _mean_type mean;

   typedef double _variance_type;
  _variance_type variance;

   typedef int64_t _N_type;
  _N_type N;





  typedef boost::shared_ptr< ::statistics_msgs::Stats1D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::statistics_msgs::Stats1D_<ContainerAllocator> const> ConstPtr;

}; // struct Stats1D_

typedef ::statistics_msgs::Stats1D_<std::allocator<void> > Stats1D;

typedef boost::shared_ptr< ::statistics_msgs::Stats1D > Stats1DPtr;
typedef boost::shared_ptr< ::statistics_msgs::Stats1D const> Stats1DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::statistics_msgs::Stats1D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::statistics_msgs::Stats1D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::statistics_msgs::Stats1D_<ContainerAllocator1> & lhs, const ::statistics_msgs::Stats1D_<ContainerAllocator2> & rhs)
{
  return lhs.min == rhs.min &&
    lhs.max == rhs.max &&
    lhs.mean == rhs.mean &&
    lhs.variance == rhs.variance &&
    lhs.N == rhs.N;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::statistics_msgs::Stats1D_<ContainerAllocator1> & lhs, const ::statistics_msgs::Stats1D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace statistics_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::statistics_msgs::Stats1D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::statistics_msgs::Stats1D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::statistics_msgs::Stats1D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::statistics_msgs::Stats1D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::statistics_msgs::Stats1D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::statistics_msgs::Stats1D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::statistics_msgs::Stats1D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e29efbcd70d63a82b5ddfac24a5bc4b";
  }

  static const char* value(const ::statistics_msgs::Stats1D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e29efbcd70d63a8ULL;
  static const uint64_t static_value2 = 0x2b5ddfac24a5bc4bULL;
};

template<class ContainerAllocator>
struct DataType< ::statistics_msgs::Stats1D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "statistics_msgs/Stats1D";
  }

  static const char* value(const ::statistics_msgs::Stats1D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::statistics_msgs::Stats1D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# statistics of a 1-D distribution\n"
"float64 min\n"
"float64 max \n"
"float64 mean \n"
"float64 variance\n"
"int64 N\n"
;
  }

  static const char* value(const ::statistics_msgs::Stats1D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::statistics_msgs::Stats1D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.min);
      stream.next(m.max);
      stream.next(m.mean);
      stream.next(m.variance);
      stream.next(m.N);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Stats1D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::statistics_msgs::Stats1D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::statistics_msgs::Stats1D_<ContainerAllocator>& v)
  {
    s << indent << "min: ";
    Printer<double>::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
    Printer<double>::stream(s, indent + "  ", v.max);
    s << indent << "mean: ";
    Printer<double>::stream(s, indent + "  ", v.mean);
    s << indent << "variance: ";
    Printer<double>::stream(s, indent + "  ", v.variance);
    s << indent << "N: ";
    Printer<int64_t>::stream(s, indent + "  ", v.N);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STATISTICS_MSGS_MESSAGE_STATS1D_H
