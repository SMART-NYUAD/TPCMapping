#!/usr/bin/env bash


# USEFUL FORMAT PARAMETERS

bold="\e[1m" 
italic="\e[3m"
underline="\e[4m"
reset="\e[0m"

black="\e[1;30m"
blue="\e[1;34m"
cyan="\e[1;36m"
green="\e[1;32m"
orange="\e[1;33m"
purple="\e[1;35m"
red="\e[1;31m"
white="\e[1;37m"
yellow="\e[1;33m"


# IS USER REQUESTING FOR HELP?

if [ "$1" == "--help" ] || [ "$1" == "-h" ]
then
    echo -e "Usage: $0 [OPTION...]\n"
    echo -e "\toptions:\n"
    echo -e -n "\t-t\tTest mode. Auto-completion of parameters (adition of "
    echo -e    "${italic}MoreTsTest${reset} to ${italic}tester_test${reset} pkg).\n"
    exit 0
fi


# SCRIPT INTRODUCTION

# Request sudo permissions
#sudo clear
#retval=$?
#if [ $retval -ne 0 ]
#then
#    echo -e "\n${bold}${red}You need sudo permissions. Stopping the script."
#    exit 1
#fi

# Introduction to the script
clear
echo -e "\n${bold}${yellow}Welcome to the subnode creator assistant."
echo -e -n "\n${reset}The goal of this script is to simplify the creation of new "
echo -e    "nodes that inherit from others on existing packages."
echo -e -n "Make sure that the existing package has been initially created "
echo -e    "with the RComponent 'node_creator' script for avoiding format errors."


# LOAD PARAMETERS

# Load templates path
templates_path=`rospack find rcomponent`"/templates"

if [ "$1" == "--test" ] || [ "$1" == "-t" ]
then

    pkg_name=tester_test
    pkg_path=`rospack find tester_test`
    if [[ ! -f $pkg_path"/CMakeLists.txt" ]]
    then
        echo -e -n "\n${bold}${red}You need to create, compile and source "
        echo -e    "the ${italic}${pkg_name}${reset}${bold}${red} package. "
        echo -e    "Stopping the script."
        exit 1
    fi
    ParentNode="TsTest"
    parent_node="ts_test"
    NewNode="MoreTsTest"
    new_node="more_ts_test"
    NEW_NODE=${new_node^^}

else

    # Load destination node name
    echo -e -n "\n${reset}Name of the existing package using snake_case (e.g. "
    echo -e    "${italic}odometry_calibration${reset}): "
    read pkg_name
    pkg_path=`rospack find $pkg_name`
    if [[ ! -f $pkg_path"/CMakeLists.txt" ]]
    then # If node has not been found
        echo -e -n "\n${reset}Package not sourced. Write the complete path to the package. "
        echo -e    "It is required to start with a slash:"
        read pkg_path
        if [[ ! -f $pkg_path"/CMakeLists.txt" ]]
        then
            echo -e -n "\n${bold}${red}The specified path does not contain a ros package. "
            echo -e    "Stopping the script."
            exit 1
        fi
    fi

    # Load ParentNode name
    echo -e -n "\n${reset}Name of the parent class using PascalCase (e.g. "
    echo -e    "${italic}OdomCalibration${reset}): "
    read ParentNode
    if [ -z "$ParentNode" ]
    then
        echo -e "${bold}${red}You have skipped a required argument. Stopping the script."
        exit 1
    fi

    # Load parent_node name
    echo -e -n "\n${reset}Name of the parent class using snake_case (e.g. "
    echo -e    "${italic}odom_calibration${reset}): "
    read parent_node
    if [ ! -f $pkg_path/include/$pkg_name/$parent_node.h ]
    then
        echo -e "${bold}${red}File $parent_node.h not found. Stopping the script."
        exit 1
    fi

    # Load NewNode name
    echo -e -n "\n${reset}Name of the new class using PascalCase (e.g. "
    echo -e    "${italic}DiffOdomCalibration${reset}): "
    read NewNode
    if [ -z "$NewNode" ]
    then
        echo -e "${bold}${red}You have skipped a required argument. Stopping the script."
        exit 1
    fi

    # Load new_node name
    echo -e -n "\n${reset}Name of the new class using snake_case (e.g. "
    echo -e    "${italic}diff_odom_calibration${reset}): "
    read new_node
    if [ -z "$new_node" ]
    then
        echo -e "${bold}${red}You have skipped a required argument. Stopping the script."
        exit 1
    fi

    # Load NEW_NODE name
    NEW_NODE=${new_node^^}

fi

# CREATE FILES

# Create .h
new_node_h="$(cat $templates_path/rc_subnode.h)"
new_node_h=${new_node_h//"?pkg_name"/$pkg_name}
new_node_h=${new_node_h//"?NewNode"/$NewNode}
new_node_h=${new_node_h//"?new_node"/$new_node}
new_node_h=${new_node_h//"?NEW_NODE"/$NEW_NODE}
new_node_h=${new_node_h//"?ParentNode"/$ParentNode}
new_node_h=${new_node_h//"?parent_node"/$parent_node}
echo -e "$new_node_h" > $pkg_path/include/$pkg_name/$new_node.h

# Create .launch
new_node_launch="$(cat $templates_path/rc_subnode_cpp.launch)"
new_node_launch=${new_node_launch//"?pkg_name"/$pkg_name}
new_node_launch=${new_node_launch//"?NewNode"/$NewNode}
new_node_launch=${new_node_launch//"?new_node"/$new_node}
new_node_launch=${new_node_launch//"?NEW_NODE"/$NEW_NODE}
new_node_launch=${new_node_launch//"?ParentNode"/$ParentNode}
new_node_launch=${new_node_launch//"?parent_node"/$parent_node}
echo -e "$new_node_launch" > $pkg_path/launch/$new_node.launch

# Create C++ src files
new_node_cpp="$(cat $templates_path/rc_subnode.cpp)"
new_node_cpp=${new_node_cpp//"?pkg_name"/$pkg_name}
new_node_cpp=${new_node_cpp//"?NewNode"/$NewNode}
new_node_cpp=${new_node_cpp//"?new_node"/$new_node}
new_node_cpp=${new_node_cpp//"?NEW_NODE"/$NEW_NODE}
new_node_cpp=${new_node_cpp//"?ParentNode"/$ParentNode}
new_node_cpp=${new_node_cpp//"?parent_node"/$parent_node}
echo -e "$new_node_cpp" > $pkg_path/src/$new_node.cpp

new_node_node_cpp="$(cat $templates_path/rc_subnode_node.cpp)"
new_node_node_cpp=${new_node_node_cpp//"?pkg_name"/$pkg_name}
new_node_node_cpp=${new_node_node_cpp//"?NewNode"/$NewNode}
new_node_node_cpp=${new_node_node_cpp//"?new_node"/$new_node}
new_node_node_cpp=${new_node_node_cpp//"?NEW_NODE"/$NEW_NODE}
new_node_node_cpp=${new_node_node_cpp//"?ParentNode"/$ParentNode}
new_node_node_cpp=${new_node_node_cpp//"?parent_node"/$parent_node}
echo -e "$new_node_node_cpp" > $pkg_path/src/$new_node"_node.cpp"

# Create CMakeLists
cmakelists_txt="$(cat $pkg_path/CMakeLists.txt)"
cmakelists_txt=${cmakelists_txt//"add_library(\${PROJECT_NAME}"/"add_library(\${PROJECT_NAME} src/$new_node.cpp"}
cmakelists_txt=${cmakelists_txt//"src/$new_node.cpp src/$new_node.cpp"/"src/$new_node.cpp"}
cmakelists_txt=${cmakelists_txt/"add_executable("/"add_executable("$new_node"_node src/"$new_node"_node.cpp)\nadd_executable("}
cmakelists_txt=${cmakelists_txt//"add_executable("$new_node"_node src/"$new_node"_node.cpp)\nadd_executable("$new_node"_node src/"$new_node"_node.cpp)"/"add_executable("$new_node"_node src/"$new_node"_node.cpp)"}
cmakelists_txt=${cmakelists_txt//"add_executable("$new_node"_node src/"$new_node"_node.cpp)"/"add_executable("$new_node"_node src/"$new_node"_node.cpp)\nadd_dependencies("$new_node"_node \${\${PROJECT_NAME}_EXPORTED_TARGETS} \${catkin_EXPORTED_TARGETS})"}
cmakelists_txt=${cmakelists_txt//"add_dependencies("$new_node"_node \${\${PROJECT_NAME}_EXPORTED_TARGETS} \${catkin_EXPORTED_TARGETS})
add_dependencies("$new_node"_node \${\${PROJECT_NAME}_EXPORTED_TARGETS} \${catkin_EXPORTED_TARGETS})"/"add_dependencies("$new_node"_node \${\${PROJECT_NAME}_EXPORTED_TARGETS} \${catkin_EXPORTED_TARGETS})"}
cmakelists_txt=${cmakelists_txt/"## Specify libraries to link a executable target against"/"## Specify libraries to link a executable target against\ntarget_link_libraries("$new_node"_node\n  \${catkin_LIBRARIES}\n  \${PROJECT_NAME}\n)"}
cmakelists_txt=${cmakelists_txt/"install(TARGETS \${PROJECT_NAME}"/"install(TARGETS \${PROJECT_NAME} "$new_node"_node"}
cmakelists_txt=${cmakelists_txt/"install(TARGETS \${PROJECT_NAME} "$new_node"_node" $new_node"_node"/"install(TARGETS \${PROJECT_NAME} "$new_node"_node"}
echo -e "$cmakelists_txt" > $pkg_path/CMakeLists.txt